AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "Simple object detect web app"
  
Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 60
    MemorySize: 1024
    Tags:
      Application: aws-object-detect-app

Parameters: 
  PictureBucketName:
    Type: String
    Default: aws-object-detect-picture-bucket
    Description: "存储用户图片的存储桶名称"
  
  RecordQueueName:
    Type: String
    Default: aws-object-detect-record-queue
    Description: "识别记录SQS队列名称"
  
  RecordTableName:
    Type: String
    Default: aws-object-detect-record-table
    Description: "识别记录DynamoDB表名称"
  
  ObjectDetectUserPoolName:
    Type: String
    Default: object-detect-app-users
    Description: "Cognito User Pool名称，不能以aws或cognito开头"
    
  ObjectDetectUserPoolClientDomain:
    Type: String
    Default: object-detect-app
    Description: "Cognito登录注册页域名，不能以aws或cognito开头"

Resources:
  # API Gateway
  ObjectDetectApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowMethods:
          - "*"
        AllowHeaders:
          - "*"
        AllowOrigins:
          - "*"
  
  # API Function
  UploadPictureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/uploadPicture
      Handler: app.handler
      Policies:
        - S3WritePolicy:
            BucketName: !Ref PictureBucket
      Environment:
        Variables:
          BUCKET_NAME: !Ref PictureBucket
      Events:
        UploadPictureApi:
          Type: HttpApi
          Properties:
            Path: /upload
            Method: get
            ApiId: !Ref ObjectDetectApi
    
  DetectPictureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/detectPicture
      Handler: app.handler
      Environment:
        Variables:
          BUCKET_NAME: !Ref PictureBucket
          QUEUE_URL: !Ref RecordQueue
      Events:
        DetectPictureApi:
          Type: HttpApi
          Properties:
            Path: /detect
            Method: get
            ApiId: !Ref ObjectDetectApi
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref PictureBucket
        - SQSSendMessagePolicy:
            QueueName: !Ref RecordQueueName
        - RekognitionDetectOnlyPolicy: {}
  
  GetRecordsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/getRecords
      Handler: app.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref RecordTable
      Environment:
        Variables:
          TABLE_NAME: !Ref RecordTable
      Events:
        GetRecordsApi:
          Type: HttpApi
          Properties:
            Path: /records
            Method: get
            ApiId: !Ref ObjectDetectApi
  
  # Common Function
  SaveRecordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/saveRecord
      Handler: app.handler
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref RecordTable
      Environment:
        Variables:
          TABLE_NAME: !Ref RecordTable
      Events:
        RecordQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt RecordQueue.Arn
            BatchSize: 10
  
  # SQS Queue
  RecordQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref RecordQueueName
      VisibilityTimeout: 60
  
  # S3 Bucket
  PictureBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref PictureBucketName
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - "GET"
              - "PUT"
            AllowedOrigins:
              - "*"
  
  # S3 Bucket Policy
  PictureBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PictureBucket
      PolicyDocument:
        Id: PictureBucket
        Version: 2012-10-17
        Statement:
          - Sid: PublicGetPicture
            Effect: Allow
            Principal: "*"
            Action: 's3:GetObject'
            Resource: !Sub "arn:aws:s3:::${PictureBucket}/*"

  # DynamoDB Table
  RecordTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref RecordTableName
      AttributeDefinitions:
        - AttributeName: "bucket"
          AttributeType: S
        - AttributeName: "key"
          AttributeType: S
      KeySchema:
        - AttributeName: "bucket"
          KeyType: HASH
        - AttributeName: "key"
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
    
  # Cognito User Pool
  ObjectDetectUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: False
      UserPoolName: !Ref ObjectDetectUserPoolName
      AutoVerifiedAttributes:
        - "email"
      Schema:
        - Mutable: False
          Name: "email"
          Required: True
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: True
          RequireNumbers: False
          RequireSymbols: False
          RequireUppercase: True
  
  # Cognito App Client
  ObjectDetectUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref ObjectDetectUserPool
      GenerateSecret: False
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthFlows:
        - "implicit"
      CallbackURLs:
        - "http://localhost:5500/src/"
      LogoutURLs:
        - "http://localhost:5500/src/"
      SupportedIdentityProviders:
        - "COGNITO"
      AllowedOAuthScopes:
        - "email"
        - "openid"
      ExplicitAuthFlows:
        - "ALLOW_USER_PASSWORD_AUTH"
        - "ALLOW_REFRESH_TOKEN_AUTH"
        
  # Cognito Domain
  ObjectDetectUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref ObjectDetectUserPoolClientDomain
      UserPoolId: !Ref ObjectDetectUserPool
    
Outputs:
  ApiEndpoint:
    Description: "Object Detect Api Endpoint URL"
    Value: !Sub "https://${ObjectDetectApi}.execute-api.${AWS::Region}.amazonaws.com"
  
  PictureURL:
    Description: "Picture Bucket URL"
    Value: !Sub "https://${PictureBucket}.s3.amazonaws.com/"
  
  RecordQueueUrl:
    Description: "Record Queue URL"
    Value: !Ref RecordQueue
    
  ObjectDetectUserPoolId:
    Description: "Object Detect App User Pool Id"
    Value: !Ref ObjectDetectUserPool
  
  ObjectDetectUserPoolDomain:
    Description: "Object Detect App User Pool Domain"
    Value: !Sub "https://${ObjectDetectUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
  
  ObjectDetectUserPoolClientId:
    Description: "Object Detect App Client Id"
    Value: !Ref ObjectDetectUserPoolClient
  
  ObjectDetectUserPoolISSUrl:
    Description: "Use for verify JWT Token"
    Value: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${ObjectDetectUserPool}"